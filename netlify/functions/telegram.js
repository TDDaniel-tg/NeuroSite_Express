// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Node.js
const fetch = globalThis.fetch || require('node-fetch');

exports.handler = async (event, context) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_CHAT_ID) {
      console.error('Missing environment variables:', {
        hasToken: !!process.env.TELEGRAM_BOT_TOKEN,
        hasChatId: !!process.env.TELEGRAM_CHAT_ID
      });
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' })
      };
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const { name, phone, email, tariff, date, message } = JSON.parse(event.body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !phone || !email || !tariff) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' })
      };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê NeuroSite Express

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìß Email: ${email}
üí∞ –¢–∞—Ä–∏—Ñ: ${getTariffName(tariff)}
üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: ${date || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML',
          disable_web_page_preview: true,
          // –î–æ–±–∞–≤–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email",
                  url: `mailto:${email}?subject=NeuroSite Express - –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É`
                },
                {
                  text: "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å",
                  url: `tel:${phone.replace(/\D/g, '')}`
                }
              ],
              [
                {
                  text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
                  url: `tg://msg?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}! –ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ ${getTariffName(tariff)}. –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏?`
                }
              ]
            ]
          }
        })
      }
    );

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text();
      console.error('Telegram API Error:', errorData);
      throw new Error(`Telegram API error: ${telegramResponse.status}`);
    }

    const result = await telegramResponse.json();

    if (!result.ok) {
      throw new Error(`Telegram returned error: ${result.description}`);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (–±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    console.log(`–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram. Message ID: ${result.result.message_id}`);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        success: true, 
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
        messageId: result.result.message_id
      })
    };

  } catch (error) {
    console.error('Error sending to Telegram:', error);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      })
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
function getTariffName(tariff) {
  const tariffs = {
    'express': '–≠–ö–°–ü–†–ï–°–° - 21 000 ‚ÇΩ',
    'business': '–ë–ò–ó–ù–ï–° - 42 000 ‚ÇΩ',
    'premium': '–ü–†–ï–ú–ò–£–ú - 65 000 ‚ÇΩ'
  };
  return tariffs[tariff] || tariff;
} 